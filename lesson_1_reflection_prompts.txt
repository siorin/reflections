How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    If it was working before and not working now, bug must be a recent change. View recent change using fc/diff.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    You can keep track of past code/functions, check what changed between past and now. Easily lookup what happened in past.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pros: Have to remember to do it, but have control over when it happens. Cons: Might forget, might not do it for awhile.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    Some projects/programs have multiple files that work together, so want to track them all if one/multiple are changed.

How can you use the commands git log and git diff to view the history of files?

    If using git log --stat, you can see list of commits, timestamps, and the number of additions/deleteions. If using git diff commit1 commit2, it will compare the 2 commits and show which lines were added/deleted (changed) betweent the 2 versions.

How might using version control make you more confident to make changes that
could break something?

    If you know you have a working backup that is saved, then you can edit the code knowing you can revert is something happens that you can't fix.

Now that you have your workspace set up, what do you want to try using Git for?

    Programming work, anything with edits? Writings?
